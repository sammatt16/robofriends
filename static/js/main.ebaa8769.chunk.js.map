{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reportWebVitals.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","headers","Service-Worker","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ebaa8769.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>{\r\n   return(\r\n    <div className='tc bg-light-green dib bre pa3 ma2 grow'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n    ); \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        <div>\r\n        {\r\n            robots.map((user, i) => {\r\n                return (\r\n                    <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                    />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n            aria-label='Search Robots'\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div> \r\n    )\r\n};\r\n\r\nexport default Scroll;","import { render } from '@testing-library/react';\r\nimport React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n    }\r\n}\r\n\r\ncomponentDidCatch(error, info){\r\n    this.setState({hasError: true})\r\n\r\n}\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops, That is not good!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        if (this.state.count !== nextState.count){\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: this.state.count + 1}})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <button color ={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component{\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport Header from '../components/Header';\r\n\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return{ \r\n       onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n       onRequestRobots: () => dispatch(requestRobots())\r\n   }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render(){\r\n        const{ searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n            <h1>Loading</h1>:\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {   \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'; \r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {   \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD: \r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}